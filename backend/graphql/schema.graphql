type Query {
  listEpicorConnection: [EpicorConnection!]
  listEpicorFunction: [EpicorFunction!]
}

type Mutation {
  createEpicorConnection(
    name: String!
    epicorUrl: String!
    epicorApiKey: String!
    epicorUsername: String!
    epicorPassword: String!
  ): [EpicorConnection]
  deleteEpicorConnection(id: ID!): Boolean

  createEpicorFunction(
    functionId: String!
    description: String!
    body: EpicorFunctionBodyInput!
    functionSignature: EpicorFunctionSignatureInput!
  ): [EpicorFunction]
  deleteEpicorFunction(id: ID!): Boolean
}

type EpicorConnection {
  id: ID!
  name: String
  uuid: String
  userId: String
  epicorUrl: String
  epicorApiKey: String
  epicorUsername: String
  epicorPassword: String
  isDeleted: Boolean
  createdAt: String
  modifiedAt: String
}


input EpicorFunctionBodyInput {
  code: String
  usings: [String]
}

input EpicorFunctionSignatureInput {
  response: Boolean
  parameterID: Int
  argumentName: String
  order: Int
  dataType: String
  optional: Boolean
}

type EpicorFunctionBody {
  code: String
  usings: [String]
}

type EpicorFunctionSignature {
  response: Boolean
  parameterID: Int
  argumentName: String
  order: Int
  dataType: String
  optional: Boolean
}

enum DefaultPrivacyLevel {
  public
  private
  contacts
}

type EpicorFunction {
  id: ID!
  uuid: String
  userId: String
  functionId: String
  description: String
  kind: Int
  requireTransaction: Boolean
  singleRowMode: Boolean
  private: Boolean
  disabled: Boolean
  invalid: Boolean
  thumbnail: String
  body: EpicorFunctionBody
  functionSignature: EpicorFunctionSignature
  privacyLevel: DefaultPrivacyLevel
  isDeleted: Boolean
  createdAt: String
  modifiedAt: String
}
